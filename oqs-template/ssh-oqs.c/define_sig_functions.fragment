{%- for sig in config['sigs'] %}
{%- set symbol_base_name = sig['name']|replace('_','') %}
/*---------------------------------------------------
 * {{ sig['name']|upper }} METHODS
 *---------------------------------------------------
 */
static int ssh_{{ symbol_base_name }}_generate(struct sshkey *k, int bits)
{
  k->oqs_pk_len = oqs_sig_pk_len(k->type);
  k->oqs_sk_len = oqs_sig_sk_len(k->type);
  if ((k->oqs_pk = malloc(k->oqs_pk_len)) == NULL ||
      (k->oqs_sk = malloc(k->oqs_sk_len)) == NULL) {
    return SSH_ERR_ALLOC_FAIL;
  }
  return OQS_SIG_{{ sig['name'] }}_keypair(k->oqs_pk, k->oqs_sk);
}

int ssh_{{ symbol_base_name }}_sign(const struct sshkey *key,
                     u_char **sigp,
                     size_t *lenp,
                     const u_char *data,
                     size_t datalen,
                     const char *alg,
                     const char *sk_provider,
                     const char *sk_pin,
                     u_int compat)
{
    OQS_SIG *sig = OQS_SIG_new(OQS_SIG_alg_{{ sig['name'] }});
    if (sig == NULL) {
        return SSH_ERR_ALLOC_FAIL;
    }
    int r = ssh_generic_sign(sig, "{{ symbol_base_name }}", key, sigp, lenp, data, datalen, compat);
    OQS_SIG_free(sig);
    return r;
}

int ssh_{{ symbol_base_name }}_verify(const struct sshkey *key,
                       const u_char *signature,
                       size_t signaturelen,
                       const u_char *data,
                       size_t datalen,
                       const char *alg,
                       u_int compat)
{
    OQS_SIG *sig = OQS_SIG_new(OQS_SIG_alg_{{ sig['name'] }});
    if (sig == NULL) {
        return SSH_ERR_ALLOC_FAIL;
    }
    int r = ssh_generic_verify(sig, "{{ symbol_base_name }}", key, signature, signaturelen, data, datalen, compat);
    OQS_SIG_free(sig);
    return r;
}

static const struct sshkey_impl_funcs sshkey_{{ symbol_base_name }}_funcs = {
  /* .size = */ ssh_generic_size,
  /* .alloc = */ ssh_generic_alloc,
  /* .cleanup = */ ssh_generic_cleanup,
  /* .equal = */ ssh_generic_equal,
  /* .ssh_serialize_public = */ ssh_generic_serialize_public,
  /* .ssh_deserialize_public = */ ssh_generic_deserialize_public,
  /* .ssh_serialize_private = */ ssh_generic_serialize_private,
  /* .ssh_deserialize_private = */ ssh_generic_deserialize_private,
  /* .generate = */ ssh_{{ symbol_base_name }}_generate,
  /* .copy_public = */ ssh_generic_copy_public,
  /* .sign = */ ssh_{{ symbol_base_name }}_sign,
  /* .verify = */ ssh_{{ symbol_base_name }}_verify,
};

const struct sshkey_impl sshkey_{{ symbol_base_name }}_impl = {
  /* .name = */ "ssh-{{ symbol_base_name }}",
  /* .shortname = */ "{{ symbol_base_name|upper }}",
  /* .sigalg = */ NULL,
  /* .type = */ KEY_{{ sig['name']|upper }},
  /* .nid = */ 0,
  /* .cert = */ 0,
  /* .sigonly = */ 0,
  /* .keybits = */ 256, // TODO - What should be here?
  /* .funcs = */ &sshkey_{{ symbol_base_name }}_funcs,
};
{%- endfor %}

#ifdef HYBRID_IMPLEMENTATION_EXISTS
// #ifdef WITH_OPENSSL
{%- for sig in config['sigs'] %}
{%- for alg in sig['mix_with'] if alg['rsa'] %}
{%- set symbol_base_name = alg['name']|replace('_','') + '_' + sig['name']|replace('_','') %}
static const struct sshkey_impl_funcs sshkey_{{ symbol_base_name }}_funcs = {
  /* .size = */ ssh_generic_size,
  /* .alloc = */ ssh_generic_alloc,
  /* .cleanup = */ ssh_generic_cleanup,
  /* .equal = */ ssh_generic_equal,
  /* .ssh_serialize_public = */ ssh_generic_serialize_public,
  /* .ssh_deserialize_public = */ ssh_generic_deserialize_public,
  /* .ssh_serialize_private = */ ssh_generic_serialize_private,
  /* .ssh_deserialize_private = */ ssh_generic_deserialize_private,
  /* .generate = */ ssh_{{ symbol_base_name }}_generate,
  /* .copy_public = */ ssh_generic_copy_public,
  /* .sign = */ ssh_{{ symbol_base_name }}_sign,
  /* .verify = */ ssh_{{ symbol_base_name }}_verify,
};

const struct sshkey_impl sshkey_{{ symbol_base_name }}_impl = {
  /* .name = */ "ssh-{{ symbol_base_name }}",
  /* .shortname = */ "{{ symbol_base_name|upper }}",
  /* .sigalg = */ NULL,
  /* .type = */ KEY_{{ sig['name']|upper }},
  /* .nid = */ 0,
  /* .cert = */ 0,
  /* .sigonly = */ 0,
  /* .keybits = */ 256, // TODO - What should be here?
  /* .funcs = */ &sshkey_{{ symbol_base_name }}_funcs,
};
{%- endfor %}
{%- endfor %}
#endif /* WITH_OPENSSL */

